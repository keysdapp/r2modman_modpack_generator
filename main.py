import json
import os
from pathlib import Path
from shutil import copyfile, copytree, make_archive, rmtree

import yaml
from gooey import Gooey, GooeyParser

CONFIG_FILE = "gooey_config.json"

def get_dependencies(profile_folder: Path) -> list[str]:
    dependencies: list[str] = []
    mods_file = profile_folder / "mods.yml"
    mods = yaml.load(open(mods_file, "r", encoding="UTF-8"), Loader=yaml.FullLoader)
    for mod in mods:
        if mod["enabled"]:
            dependencies.append(f"{mod["name"]}-{mod["versionNumber"]["major"]}.{mod["versionNumber"]["minor"]}.{mod["versionNumber"]["patch"]}")
    return dependencies


@Gooey(program_name="r2modman Modpack Generator")
def main():
    parser = GooeyParser(
        prog="r2modman Modpack Generator",
        description="Automatically generates a modpack from your r2modman profile.",
    )
    parser.add_argument(
        "profile_folder",
        metavar="Profile Folder",
        widget="DirChooser",
        help="The folder containing your r2modman profile.",
    )
    parser.add_argument(
        "name",
        metavar="Name",
        action="store",
        help="The name of the modpack.",
    )
    parser.add_argument(
        "--icon",
        metavar="Icon",
        widget="FileChooser",
        default="defaults/icon.png",
        help="The icon of the modpack.",
    )
    parser.add_argument(
        "--readme",
        metavar="README",
        widget="FileChooser",
        default="defaults/README.md",
        help="The readme of the modpack.",
    )
    parser.add_argument(
        "--changelog",
        metavar="CHANGELOG",
        widget="FileChooser",
        default="",
        help="The changelog of the modpack.",
    )
    parser.add_argument(
        "--enable_config",
        metavar="Enable Config",
        action="store_true",
        help="Do you want to include your configs?",
    )
    parser.add_argument(
        "--version",
        metavar="Version",
        action="store",
        default="1.0.0",
        help="The version of the modpack (formatted as x.x.x).",
    )
    parser.add_argument(
        "--description",
        metavar="Description",
        action="store",
        default="Modpack generated by r2modman Modpack Generator.",
        help="The description of the modpack.",
    )

    args = parser.parse_args()

    profile_folder = Path(args.profile_folder)
    icon = Path(args.icon)
    readme = Path(args.readme)
    changelog = Path(args.changelog)
    enable_config: bool = args.enable_config
    version: str = args.version
    description: str = args.description
    name: str = profile_folder.name.replace(" ", "") if args.name == "" else args.name

    dependencies: list[str] = get_dependencies(profile_folder)

    manifest: dict[str, str | list[str]] = {
        "name": name,
        "version_number": version,
        "website_url": "",
        "description": description,
        "dependencies": dependencies,
    }

    os.mkdir(name)
    json.dump(manifest, open(f"{name}/manifest.json", "w+", encoding="UTF-8"), indent=4)

    if enable_config:
        copytree(
            profile_folder / "BepInEx/config",
            f"{name}/BepInEx/config",
            dirs_exist_ok=True,
        )

    copyfile(icon, f"{name}/icon.png")
    copyfile(readme, f"{name}/README.md")
    if changelog != "":
        copyfile(changelog, f"{name}/CHANGELOG.md")

    make_archive(name, "zip", name)

    rmtree(name)


if __name__ == "__main__":
    main()
